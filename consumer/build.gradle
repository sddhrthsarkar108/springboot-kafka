dependencies {
    implementation project(':common')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    
    // Add Kafka dependencies
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.kafka:kafka-clients'
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'org.apache.logging.log4j:log4j-core'
    
    // Redis for exactly-once processing with TTL support
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
}

// Configure the bootJar task to create a properly named jar
bootJar {
    archiveBaseName = 'consumer'
    archiveClassifier = ''
}

// Configure Jib for Docker image building
jib {
    from {
        image = 'amazoncorretto:21.0.2-al2023-headless'
    }
    to {
        image = "com.example/consumer:${project.version}"
    }
    container {
        jvmFlags = [
//            '-Xms256m',
//            '-Xmx512m',
//            '-XX:+UseG1GC',
//            '-XX:+UseStringDeduplication',
//            '-Djava.security.egd=file:/dev/./urandom'
        ]
        ports = ['8084']
        environment = [
//            'SPRING_PROFILES_ACTIVE': 'docker',
            'SERVER_PORT': '8084',
            'SPRING_KAFKA_BOOTSTRAP_SERVERS': 'kafka:9092'
        ]
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
    // Specify the main class to improve build speed
    container.mainClass = 'com.sbtl1.consumer.Consumer'
} 